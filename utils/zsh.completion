#compdef badass

# AUTOMATCALLY GENERATED by `shtab`

_shtab_badass_options_=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-o,--output}"[print results to PATH (default\: stdout)]:output:"
  {-l,--log}"[print log messages to PATH (default\: stderr)]:log:"
  "--lang[programming language for the project (default\: \'C\')]:lang:"
  "--db[PATH to database for result records (default \'bad.db\')]:db:"
  "--record[record result as TEST in PROJECT (two arbitrary tags)]:record:"
  {-b,--base}"[path of project base directory (default\: \'.\')]:base:"
)

_shtab_badass_commands_() {
  local _commands=(
    "compare:"
    "cparse:"
    "has:"
    "p5:"
    "patch:"
    "report:"
    "run:"
    "xpath:"
  )

  _describe 'badass commands' _commands
}

_shtab_badass_compare=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-g,--glob}"[files to include in comparison]:glob:"
  "--csv[save distance matrix to CSV]:csv:"
  "--heatmap[draw a clustered heatmap in PATH]:heatmap:"
  "*--hmopt[additional options for heatmap]:hmopt:"
  "--maxsize[split heatmap into clusters of at most COUNT projects]:maxsize:"
  "--absolute[draw heatmap with absolute colors]"
  "--load[load distance matrix from CSV instead of computing it]:load:"
  "*:project base dir (or single file):"
)

_shtab_badass_cparse=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-i,--input}"[read code from PATH]:input:"
  ":C code:"
)

_shtab_badass_has=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  ":declaration to be searched for (name or signature):"
)

_shtab_badass_p5=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*-I[add DIR the the set of paths searched for includes]:include:"
  {-m,--marker}"[directives marker (default\: \'\/\/\')]:marker:"
  "*"{-l,--let}"[define additional names, as with let directive]:let:"
  {-s,--save}"[save ppppped text to FILE]:save:"
  {-n,--nocpp}"[output text whithout paassing it to cpp]"
  "*:input FILEs to process:"
)

_shtab_badass_patch=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  ":file to be patched:"
  "*:patch directives (del NAME \/ add PATH\@NAME):"
)

_shtab_badass_report=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  ":file name to be saved (default \'badass.csv\'):"
)

_shtab_badass_run=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-t,--timeout}"[limit of CPU runtime, in seconds (default 60)]:timeout:"
  "--out[show stdout]"
  "--err[show stderr]"
  "--ret[show return codes]"
  "--sys[show strace]"
  "*"{-a,--add}"[files to add to the project (unless already present)]:add:"
  "*"{-r,--replace}"[files to replace in the project (or add if absent)]:replace:"
)

_shtab_badass_xpath=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-s,--source}"[output result as source code (default)]"
  {-x,--xml}"[output result as XML]"
  {-c,--count}"[output result as the number of matches]"
  ":file to be searched in:"
  ":xpath expression:"
)

typeset -A opt_args
local context state line curcontext="$curcontext"

_arguments \
  $_shtab_badass_options_ \
   \
  ': :_shtab_badass_commands_' \
  '*::args:->args'

case $words[1] in
  compare) _arguments $_shtab_badass_compare ;;
  cparse) _arguments $_shtab_badass_cparse ;;
  has) _arguments $_shtab_badass_has ;;
  p5) _arguments $_shtab_badass_p5 ;;
  patch) _arguments $_shtab_badass_patch ;;
  report) _arguments $_shtab_badass_report ;;
  run) _arguments $_shtab_badass_run ;;
  xpath) _arguments $_shtab_badass_xpath ;;
esac
