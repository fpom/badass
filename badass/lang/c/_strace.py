#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class straceBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(straceBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class straceParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=straceBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(straceParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._atom_()
        self.name_last_node('time')
        with self._group():
            with self._choice():
                with self._option():
                    self._syscall_()
                with self._option():
                    self._signal_()
                with self._option():
                    self._exit_()
                self._error('no available options')
        self.name_last_node('event')
        self._check_eof()
        self.ast._define(
            ['event', 'time'],
            []
        )

    @tatsumasu()
    def _syscall_(self):  # noqa
        self._call_()
        self.name_last_node('call')
        self._token('=')
        with self._group():
            with self._choice():
                with self._option():
                    self._atom_()
                with self._option():
                    self._token('?')
                self._error('no available options')
        self.name_last_node('ret')
        self._pattern('.*')
        self.name_last_node('info')
        self.ast._define(
            ['call', 'info', 'ret'],
            []
        )

    @tatsumasu()
    def _call_(self):  # noqa
        self._name_()
        self.name_last_node('func')
        self._token('(')

        def sep2():
            self._token(',')

        def block2():
            with self._optional():
                self._name_()
                self._token('=')
            self._expr_()
        self._join(block2, sep2)
        self.name_last_node('args')
        self._token(')')
        self.ast._define(
            ['args', 'func'],
            []
        )

    @tatsumasu()
    def _signal_(self):  # noqa
        self._token('---')
        self._name_()
        self.name_last_node('sig')
        self._struct_()
        self.name_last_node('info')
        self._token('---')
        self.ast._define(
            ['info', 'sig'],
            []
        )

    @tatsumasu()
    def _exit_(self):  # noqa
        self._token('+++')
        self._token('exited')
        self._token('with')
        self._atom_()
        self.name_last_node('status')
        self._token('+++')
        self.ast._define(
            ['status'],
            []
        )

    @tatsumasu()
    def _atom_(self):  # noqa
        self._pattern('(?i)[+-]?[\\w.]+')

    @tatsumasu()
    def _name_(self):  # noqa
        self._pattern('\\w+')

    @tatsumasu()
    def _expr_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._string_()
                    self.name_last_node('t')
                with self._option():
                    self._array_()
                    self.name_last_node('a')
                with self._option():
                    self._struct_()
                    self.name_last_node('s')
                with self._option():
                    self._call_()
                    self.name_last_node('c')
                with self._option():
                    self._atom_()
                    self.name_last_node('v')
                self._error('no available options')
        self.name_last_node('value')
        with self._optional():
            self._token('...')
        with self._optional():
            self._comment_()
            self.name_last_node('info')
        with self._optional():
            self._operator_()
            self.name_last_node('op')
            self._expr_()
            self.name_last_node('right')
        self.ast._define(
            ['a', 'c', 'info', 'op', 'right', 's', 't', 'v', 'value'],
            []
        )

    @tatsumasu()
    def _comment_(self):  # noqa
        self._pattern('/\\*(\\*(?!/)|[^*])*\\*/')

    @tatsumasu()
    def _string_(self):  # noqa
        self._pattern('(?i)\\"[^\\"]*\\"')

    @tatsumasu()
    def _array_(self):  # noqa
        self._token('[')

        def sep0():
            self._token(',')

        def block0():
            self._expr_()
        self._join(block0, sep0)
        self._token(']')

    @tatsumasu()
    def _struct_(self):  # noqa
        self._token('{')

        def sep1():
            self._token(',')

        def block1():
            with self._optional():
                self._name_()
                self._token('=')
            self._expr_()
        self._join(block1, sep1)
        self.name_last_node('fields')
        self._token('}')
        self.ast._define(
            ['fields'],
            []
        )

    @tatsumasu()
    def _operator_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('&&')
            with self._option():
                self._token('||')
            with self._option():
                self._token('==')
            with self._option():
                self._token('!=')
            with self._option():
                self._token('<=')
            with self._option():
                self._token('>=')
            with self._option():
                self._pattern('[\\^&|+*/<>%-]')
            self._error('no available options')


class straceSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def syscall(self, ast):  # noqa
        return ast

    def call(self, ast):  # noqa
        return ast

    def signal(self, ast):  # noqa
        return ast

    def exit(self, ast):  # noqa
        return ast

    def atom(self, ast):  # noqa
        return ast

    def name(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def comment(self, ast):  # noqa
        return ast

    def string(self, ast):  # noqa
        return ast

    def array(self, ast):  # noqa
        return ast

    def struct(self, ast):  # noqa
        return ast

    def operator(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = straceParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, straceParser, name='strace')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
